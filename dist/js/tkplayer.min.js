let TKPlayer={elm:null,audio_elm:null,panel_elm_name:null,panel_elm_author:null,panel_elm_cover:null,play_button:null,progress_selector:null,progress_bar:null,progress_base:null,time_bar:null,recommend_source:"https://api.cnsoft.top/tkplayer/",music_info:{name:null,author:null,src:null,cover:null},max_song:null,now_song:null,is_single:!1,music_list:null,init(){this.audio_elm.addEventListener("timeupdate",this.sync_progress_bar.bind(this)),this.audio_elm.addEventListener("loadedmetadata",this.output_time_text.bind(this)),this.progress_base.addEventListener("click",e=>this.compute_progress(e)),this.panel_elm_cover.addEventListener("dblclick",this.close_player.bind(this))},is_paused(){return!this.audio_elm.paused},start(e){"object"!=typeof e||Array.isArray(e)?Array.isArray(e)?(this.is_single=!1,this.source_list(e),this.startMusicPlayer()):0==e?(console.log("你选择了主动源启动，请注意是否提前准确地提供了资源列表~"),this.startMusicPlayer()):(console.log("你启动播放器尚未提供任何参数，这里为你主动推荐一首歌曲~"),this.is_single=!0,this.get_recommend_data().then(e=>{this.inject_info(e),this.startMusicPlayer()}).catch(e=>{console.error("获取推荐数据出错"),alert("推荐源可能失效！")})):(this.is_single=!0,this.inject_info(e),this.startMusicPlayer())},play(){this.change_play_icon(),this.is_paused()?this.audio_elm.pause():this.audio_elm.play().catch(e=>{alert("媒体解析失效，你提供的资源列表有问题！")})},next(){this.is_single||(this.now_song==this.max_song-1?this.now_song=0:this.now_song++,this.inject_info(this.music_list[this.now_song])),this.change_music(),this.play()},prev(){this.is_single||(this.now_song<=0?this.now_song=this.max_song-1:this.now_song--,this.inject_info(this.music_list[this.now_song])),this.change_music(),this.play()},get_allTime(){return this.audio_elm.duration},get_currentTime(){return this.audio_elm.currentTime},translate_time(e){var e=Math.ceil(e),t=Math.floor(e/60),e=e%60;return(t<10?"0"+t:t)+":"+(e<10?"0"+e:e)},output_time_text(){this.time_bar.innerText=this.translate_time(this.get_currentTime())+"/"+this.translate_time(this.get_allTime())},change_play_icon(){this.play_button.setAttribute("class",this.is_paused()?"icon-play":"icon-pause")},sync_progress_bar(){this.progress_bar.style.width=this.get_currentTime()/this.get_allTime()*100+"%",this.output_time_text(),this.get_allTime()==this.get_currentTime()&&this.play_button.setAttribute("class","icon-play")},compute_progress(e){var t=this.progress_base.offsetWidth,e=e.offsetX/t;if(isNaN(this.get_allTime()))return console.log("歌曲文件损坏，无法获取总时长！"),!1;newTime=this.get_allTime()*e,this.change_duration(newTime)},change_duration(e){this.audio_elm.currentTime=e},change_music(){this.change_duration(0),this.sync_progress_bar(),this.audio_elm.paused=!1,this.play_button.setAttribute("class","icon-play"),this.panel_elm_name.innerText=this.music_info.name,this.panel_elm_author.innerText=this.music_info.author,this.panel_elm_cover.setAttribute("src",this.music_info.cover),this.audio_elm.setAttribute("src",this.music_info.src)},startMusicPlayer(){document.getElementById("player")?alert("你已经创建播放器啦，无需再次创建哦！"):document.querySelector("body").innerHTML+=`
      <div class="player" id="player">
        <div class="panel">
          <div class="media-info">
            <div class="title">${this.music_info.name}</div>
            <div class="author">${this.music_info.author}</div>
            <div class="controller">
              <span class="icon-backward" title="上一曲" onclick="TKPlayer.prev()"></span>
              <span class="icon-play" id="play-button" onclick="TKPlayer.play()" title="播放/暂停"></span>
              <span class="icon-forward" title="下一曲" onclick="TKPlayer.next()"></span>
            </div>
          </div>
          <div class="progress">
            <div class="duration">00:00/**:**</div>
            <div class="progress-bar" id="progress-bar"></div>
          </div>
        </div>
        <div class="cover">
          <img src="${this.music_info.cover}" alt="cover">
        </div>
        <audio src="${this.music_info.src}" id="audio"></audio>
      </div>
  	`,TKPlayer.elm=document.querySelector("#player"),TKPlayer.audio_elm=document.querySelector("#player #audio"),TKPlayer.play_button=document.querySelector("#player #play-button"),TKPlayer.progress_selector=document.querySelector("#player .progress"),TKPlayer.progress_bar=document.querySelector("#player #progress-bar"),TKPlayer.progress_base=document.querySelector("#player .progress"),TKPlayer.time_bar=document.querySelector("#player .progress .duration"),TKPlayer.panel_elm_name=document.querySelector("#player .title"),TKPlayer.panel_elm_author=document.querySelector("#player .author"),TKPlayer.panel_elm_cover=document.querySelector("#player .cover img"),TKPlayer.init()},inject_info(e){e.cover&&e.src?this.music_info={name:e.name||"未命名歌曲",author:e.author||"未命名作者",cover:e.cover,src:e.src}:console.log("歌曲信息失效！")},source_list(e){console.log("正在注入灵魂中~"),this.is_single=!1,this.music_list=e,this.max_song=e.length,this.now_song=0,this.music_info=e[this.now_song]},close_player(){var e=this.elm;e.parentNode.removeChild(e)},get_recommend_data(){let i=this.recommend_source;return new Promise((e,t)=>{let s=new XMLHttpRequest;s.open("GET",i,!0),s.onerror=()=>t(new Error("请求出现错误")),s.onload=()=>{200===s.status?e(JSON.parse(s.responseText)):t(new Error("请求失败: "+s.status))},s.send()})}};
//# sourceMappingURL=tkplayer.min.js.map
